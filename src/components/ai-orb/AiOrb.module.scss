@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

// Import variables if needed (assuming they are globally available or imported)
// Adjust paths/imports based on your project structure
$primary-purple: #8A2BE2;
$primary-blue: #3E7BFA;
$chrome-silver: #E8E9EB; // Added for highlights
$light-gray: #F5F5F7;

.aiOrb {
  position: absolute;
  transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1),
              transform 0.1s ease-out, // Faster transition for pulse
              box-shadow 0.1s ease-out; // Faster transition for pulse
  z-index: 10;
  overflow: visible; // Allow shadow/glow to extend beyond bounds

  // CSS Variable for pulse control
  --pulse-intensity: 0;
  --orb-size: 420px;
  --orb-size-hover: 70px;
  --speaker-icon-width: 24px;
  --speaker-icon-height: 24px;
  --sound-intensity: 0; /* New variable for sound intensity */
  --sound-color-primary: #00ffcc; /* Sound-reactive color primary */
  --sound-color-secondary: #7b68ee; /* Sound-reactive color secondary */

  // Apply shared dynamic styles directly based on the variable
  transform: translate(-50%, -50%) scale(calc(1 + var(--sound-intensity) * 0.12));
  box-shadow: 
    // Base shadow (becomes border shadow when transparent)
    0 0 calc(10px + var(--sound-intensity) * 40px) rgba(62, 123, 250, calc(0.3 + var(--sound-intensity) * 0.5)),
    0 0 calc(20px + var(--sound-intensity) * 60px) rgba(138, 43, 226, calc(0.2 + var(--sound-intensity) * 0.4)),
    // Add subtle inner/outer shadow for floating orb state only
    0 10px calc(30px + var(--sound-intensity) * 30px) rgba(0, 0, 0, calc(0.1 + var(--sound-intensity) * 0.2)),
    inset 0 0 calc(20px + var(--sound-intensity) * 15px) rgba(255, 255, 255, calc(0.2 + var(--sound-intensity) * 0.3));

  // --- Default State: Floating Orb --- (Specifics)
  width: var(--orb-size);
  height: var(--orb-size);
  border-radius: 50%;
  top: 50%;
  left: 50%;
  background: radial-gradient(
    circle,
    rgba(var(--primary-rgb), 0.1) 0%,
    rgba(var(--primary-rgb), 0.05) 65%,
    rgba(var(--primary-rgb), 0) 100%
  );
  display: flex;
  justify-content: center;
  align-items: center;
  // border: none; // Ensure no conflicting border

  &::before {
    content: '';
    position: absolute;
    width: calc(100% + 20px);
    height: calc(100% + 20px);
    border-radius: 50%;
    background: transparent;
    border: 2px solid rgba(var(--primary-rgb), 0.2);
    animation: pulse 2s infinite;
    filter: blur(2px);
    opacity: var(--pulse-intensity);
  }
  
  &::after {
    content: '';
    position: absolute;
    width: calc(100% + 8px);
    height: calc(100% + 8px);
    border-radius: 50%;
    box-shadow: 0 0 15px calc(15px * var(--sound-intensity)) rgba(var(--primary-rgb), 0.7);
    border: 2px solid rgba(var(--primary-rgb), calc(0.3 + var(--sound-intensity) * 0.7));
    transition: all 0.1s ease-out;
    animation: soundPulse 0.5s infinite alternate;
    opacity: calc(0.5 + var(--sound-intensity) * 0.5);
  }

  // --- State: Camera On (Becomes Border) --- 
  /* &.cameraOn { ... } // REMOVING THIS ENTIRE BLOCK */
}

// Container for the pulsing bars inside the floating orb
// .pulseBars {
//   position: absolute;
//   bottom: 15%; // Position bars towards the bottom
//   left: 50%;
//   transform: translateX(-50%);
//   display: flex;
//   align-items: flex-end; // Bars grow upwards
//   gap: 4px;
//   height: 30%; // Max height of bars relative to orb
//   
//   > div {
//     width: 6px;
//     background: rgba(255, 255, 255, 0.7); // Semi-transparent white bars
//     border-radius: 3px;
//     height: 10%; // Start small
//     // Animation will be applied by .isSpeaking class
//   }
// }

// Modified animation for the border pulse effect (more rhythmic)
@keyframes pulseBorder {
  from {
    // Less blurry shadow, more size-focused
    box-shadow: 0 0 8px 2px rgba(62, 123, 250, 0.5), 
                0 0 15px 5px rgba(138, 43, 226, 0.4);
    transform: scale(1); // Base scale
  }
  to {
    box-shadow: 0 0 12px 4px rgba(62, 123, 250, 0.7),
                0 0 25px 8px rgba(138, 43, 226, 0.6);
    transform: scale(1.01); // Slightly larger scale for pulse
  }
}

// Animation for border rotation
@keyframes rotate {
  0% {
    background-position: 0% 0%;
  }
  100% {
    background-position: 200% 200%;
  }
}

@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
  100% {
    transform: scale(1);
  }
}

@keyframes soundPulse {
  0% {
    transform: scale(1);
  }
  100% {
    transform: scale(calc(1 + var(--sound-intensity) * 0.05));
  }
}

@keyframes soundGlow {
  0% {
    opacity: calc(0.5 + var(--sound-intensity) * 0.3);
    filter: blur(calc(1px + var(--sound-intensity) * 1px));
  }
  100% {
    opacity: calc(0.7 + var(--sound-intensity) * 0.3);
    filter: blur(calc(2px + var(--sound-intensity) * 3px));
  }
}

// Container for the spikes that will appear around webcam border
.spikesContainer {
  position: absolute;
  width: 100%;
  height: 100%;
  border-radius: 16px;
  overflow: visible;
  z-index: 6;
  pointer-events: none; // Allow interactions to pass through
}

// Add the new spikePulse animation
@keyframes spikePulse {
  0% {
    height: calc(10px + var(--sound-intensity) * 5px);
    opacity: 0.6;
  }
  100% {
    height: calc(20px + var(--sound-intensity) * 15px);
    opacity: 0.9;
  }
} 