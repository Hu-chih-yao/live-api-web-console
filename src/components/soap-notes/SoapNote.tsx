import React, { useState, useEffect, useRef } from 'react';
import { FaFilePdf, FaFileAlt, FaDownload } from 'react-icons/fa';
import { useSoapNote } from '../../contexts/SoapNoteContext';
import jsPDF from 'jspdf';
import './soap-notes.scss';
import { SoapNoteData } from '../../types/soap-note';

function generateSoapNoteMarkdown(data: SoapNoteData): string {
  const {
    patientName = "Anonymous Patient",
    dateOfBirth = "Not provided",
    visitDate = new Date().toISOString().split('T')[0],
    chiefComplaint = "",
    historyOfPresentIllness = "",
    pastMedicalHistory = "",
    medications = "",
    allergies = "",
    reviewOfSystems = "",
    physicalExam = data.objective || "Virtual consultation - no physical examination performed",
    assessment = "",
    plan = "",
    icdCodes = []
  } = data;

  const hpi = historyOfPresentIllness || (data.subjective || "");
  
  const formattedICDCodes = icdCodes && icdCodes.length > 0 
    ? icdCodes.map(code => `- ${code.code}: ${code.description}`).join('\n')
    : 'None provided';

  return `# MEDICAL CONSULTATION NOTE
**DISCLAIMER: This note was generated by an AI assistant and is NOT an official medical record. It has not been reviewed by a licensed healthcare professional.**

## Patient Information
- **Name:** ${patientName}
- **Date of Birth:** ${dateOfBirth}
- **Visit Date:** ${visitDate}

## Chief Complaint (CC)
${chiefComplaint || "Not yet documented"}

## History of Present Illness (HPI)
${hpi || "Not yet documented"}

## Past Medical History (PMH)
${pastMedicalHistory || "Not yet documented"}

## Medications & Allergies
### Current Medications
${medications || "Not yet documented"}

### Allergies
${allergies || "Not yet documented"}

## Review of Systems (ROS)
${reviewOfSystems || "Not yet documented"}

## Physical Exam (PE)
${physicalExam}

## Assessment
${assessment || "Assessment pending..."}

## Plan
${plan || "Plan pending..."}

## ICD-10-CM Codes
${formattedICDCodes}

---

*This document was generated by an AI medical assistant following NEJM documentation standards for informational purposes only. It does not constitute medical advice, diagnosis, or treatment. Please consult with a licensed healthcare professional for proper medical care.*

*Last updated: ${new Date().toLocaleString()}*`;
}

interface SoapNoteProps {
  isVisible: boolean;
}

const SoapNote: React.FC<SoapNoteProps> = ({ isVisible }) => {
  const { soapNoteData, hasChanges } = useSoapNote();
  const [markdown, setMarkdown] = useState<string>('');
  const contentRef = useRef<HTMLDivElement>(null);
  const [lastUpdateTime, setLastUpdateTime] = useState<Date>(new Date());
  const [isAnimating, setIsAnimating] = useState(false);

  useEffect(() => {
    if (hasChanges) {
      const generatedMarkdown = generateSoapNoteMarkdown(soapNoteData);
      setMarkdown(generatedMarkdown);
      setLastUpdateTime(new Date());
      setIsAnimating(true);
      const timer = setTimeout(() => setIsAnimating(false), 1500);
      return () => clearTimeout(timer);
    }
  }, [soapNoteData, hasChanges]);

  const handlePdfDownload = () => {
    try {
      const pdf = new jsPDF();
      pdf.text('Medical Note', 20, 20);
      pdf.text(markdown, 20, 30);
      pdf.save('medical_note.pdf');
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF. Please try downloading as text instead.');
    }
  };

  const handleTextDownload = () => {
    const blob = new Blob([markdown], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'medical_note.txt';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  if (!isVisible || !hasChanges) {
    return null;
  }

  return (
    <div className="soap-note-container">
      <div className="soap-note-header">
        <div className="soap-note-title">
          <h2>Medical Documentation</h2>
          <div className={`update-indicator ${isAnimating ? 'pulse' : ''}`}>
            <span className="dot"></span>
            <span>Live</span>
          </div>
        </div>
        <div className="soap-note-actions">
          <button onClick={handlePdfDownload} className="soap-note-button">
            <FaFilePdf className="button-icon" />
            <span>PDF</span>
          </button>
          <button onClick={handleTextDownload} className="soap-note-button">
            <FaFileAlt className="button-icon" />
            <span>Text</span>
          </button>
        </div>
      </div>
      
      <div className="soap-note-preview">
        <div ref={contentRef} className="soap-note-content">
          {markdown.split('\n').map((line, i) => (
            <p key={i}>{line}</p>
          ))}
        </div>
      </div>

      <div className="soap-note-disclaimer">
        <p>This document is being updated in real-time as your consultation progresses.</p>
        <button onClick={handlePdfDownload} className="soap-note-button download-full-button">
          <FaDownload className="button-icon" />
          <span>Download Complete Note</span>
        </button>
      </div>
    </div>
  );
};

export default SoapNote;