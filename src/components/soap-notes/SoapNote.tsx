import React, { useState, useEffect, useRef } from 'react';
import { FaFilePdf, FaFileAlt, FaDownload } from 'react-icons/fa';
import { useSoapNote } from '../../contexts/SoapNoteContext';
import jsPDF from 'jspdf';
import './soap-notes.scss';

interface SoapNoteProps {
  isVisible: boolean;
}

const SoapNote: React.FC<SoapNoteProps> = ({ isVisible }) => {
  const { soapNoteData, hasChanges } = useSoapNote();
  const [markdown, setMarkdown] = useState<string>('');
  const contentRef = useRef<HTMLDivElement>(null);
  const [lastUpdateTime, setLastUpdateTime] = useState<Date>(new Date());
  const [isAnimating, setIsAnimating] = useState(false);

  useEffect(() => {
    if (hasChanges) {
      const generatedMarkdown = generateSoapNoteMarkdown(soapNoteData);
      setMarkdown(generatedMarkdown);
      setLastUpdateTime(new Date());
      setIsAnimating(true);
      const timer = setTimeout(() => setIsAnimating(false), 1500);
      return () => clearTimeout(timer);
    }
  }, [soapNoteData, hasChanges]);

  const handlePdfDownload = () => {
    try {
      const pdf = new jsPDF();
      pdf.text('Medical Note', 20, 20);
      pdf.text(markdown, 20, 30);
      pdf.save('medical_note.pdf');
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF. Please try downloading as text instead.');
    }
  };

  const handleTextDownload = () => {
    const blob = new Blob([markdown], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'medical_note.txt';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  if (!isVisible || !hasChanges) {
    return null;
  }

  return (
    <div className="soap-note-container">
      <div className="soap-note-header">
        <div className="soap-note-title">
          <h2>Medical Documentation</h2>
          <div className={`update-indicator ${isAnimating ? 'pulse' : ''}`}>
            <span className="dot"></span>
            <span>Live</span>
          </div>
        </div>
        <div className="soap-note-actions">
          <button onClick={handlePdfDownload} className="soap-note-button">
            <FaFilePdf className="button-icon" />
            <span>PDF</span>
          </button>
          <button onClick={handleTextDownload} className="soap-note-button">
            <FaFileAlt className="button-icon" />
            <span>Text</span>
          </button>
        </div>
      </div>
      
      <div className="soap-note-preview">
        <div ref={contentRef} className="soap-note-content">
          {markdown.split('\n').map((line, i) => (
            <p key={i}>{line}</p>
          ))}
        </div>
      </div>

      <div className="soap-note-disclaimer">
        <p>This document is being updated in real-time as your consultation progresses.</p>
        <button onClick={handlePdfDownload} className="soap-note-button download-full-button">
          <FaDownload className="button-icon" />
          <span>Download Complete Note</span>
        </button>
      </div>
    </div>
  );
};

function generateSoapNoteMarkdown(data: any): string {
  return `MEDICAL NOTE
Date: ${new Date().toLocaleDateString()}

CHIEF COMPLAINT:
${data.chiefComplaint || 'Not documented'}

HISTORY OF PRESENT ILLNESS:
${data.historyOfPresentIllness || 'Not documented'}

ASSESSMENT:
${data.assessment || 'Not documented'}

PLAN:
${data.plan || 'Not documented'}

Generated by AI Medical Assistant
Last updated: ${new Date().toLocaleString()}`;
}

export default SoapNote;